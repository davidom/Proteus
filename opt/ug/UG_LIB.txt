


UG LIBRARY        : UNSTRUCTURED GRID GENERAL PURPOSE ROUTINES
-------------------------------------------------------

The following routines can be used to check, free, get, initialize, malloc,
read, set, and write UG parameters, free, malloc, and realloc arrays, write
error messages, write messages, and determine machine round-off.

  ug_case_name                    : Set or get case name.
  ug_basename                     : Get base name from full file name with path.
  ug_check_param                  : Check UG parameters.
  ug_free_param                   : Free UG parameter structure arrays.
  ug_get_char_param               : Get the value of a UG type char parameter.
  ug_get_char_param_index         : Get the index and last label index of a UG
                                    type char parameter.
  ug_get_double_param             : Get the value of a UG type double parameter.
  ug_get_double_param_index       : Get the index and last label index of a UG
                                    type double parameter.
  ug_get_double_param_vector      : Get the values for a UG type double
                                    parameter vector.
  ug_get_int_param                : Get the value of a UG type int parameter.
  ug_get_int_param_index          : Get the index and last label index of a UG
                                    type int parameter.
  ug_get_int_param_vector         : Get the values for a UG type int parameter
                                    vector.
  ug_get_read_char_param          : Get the value of a UG type char parameter
                                    from either the UG parameter file or if not
                                    found there from the UG parameter structure.
  ug_get_read_double_param        : Get the value of a UG type double parameter
                                    from either the UG parameter file or if not
                                    found there from the UG parameter structure.
  ug_get_read_double_param_vector : Get the values for a UG type double
                                    parameter vector from either the UG
                                    parameter file or if not found there from
                                    the UG parameter structure.
  ug_get_read_int_param           : Get the value of a UG type int parameter
                                    from either the UG parameter file or if not
                                    found there from the UG parameter structure.
  ug_get_read_int_param_vector    : Get the values for a UG type int parameter
                                    vector from either the UG parameter file or
                                    if not found there from the UG parameter
                                    structure.
  ug_malloc_param                 : Malloc UG parameter structure arrays.
  ug_read_param                   : Search a file for UG parameters to read and
                                    reset.
  ug_realloc_param                : Realloc UG parameter structure arrays.
  ug_save_param_file              : Save a UG parameter file.
  ug_set_char_param               : Set the value of a UG type char parameter.
  ug_set_double_param             : Set the value of a UG type double parameter.
  ug_set_double_param_vector      : Set the values for a UG type double
                                    parameter vector.
  ug_set_int_param                : Set the value of a UG type int parameter.
  ug_set_int_param_vector         : Set the values for a UG type int parameter
                                    vector.
  ug_set_double_vector            : Set double vector values in a char
                                    parameter.
  ug_set_int_vector               : Set integer vector values in a char
                                    parameter.
  ug_set_param_def                : Set UG parameter variables to default
                                    values.
  ug_write_param_file             : Write a UG parameter file.
  ug_write_param_info             : Write information about UG parameters to
                                    standard output.

  ug_malloc
  ug_free                  : Free array space.
  ug_calloc                : Allocate and initialize array space.
  ug_malloc                : Allocate array space.
  ug_realloc               : Re-allocate array space.

  ug_fio
  ug_file_status_monitor       : Turn file status monitor on or off.
  ug_fclose                    : Close a binary socket, TMP, or regular file.
  ug_fopen                     : Open a binary socket, TMP, or regular file.
  ug_fread                     : Read from binary socket, TMP, or regular file.
  ug_fwrite                    : Write to binary socket, TMP, or regular file.
  ug_get_file_name_mode_flag   : Determine if a file name is associated with a
                                 binary socket, TMP, or neither.
  ug_get_file_stream_mode_flag : Determine if a file stream is associated with a
                                 binary socket, TMP, or neither.
  ug_rewind                    : Rewind a binary socket, TMP, or regular file.

  ug_fio_byte_order
  ug_get_byte_order        : Set host byte ordering.
  ug_reverse_byte_order    : Reverse byte order if file format and host byte
                             ordering differs.
  ug_set_byte_order        : Set file format and host to big or little endian
                             byte ordering.

  ug_fio_socket_file
  ug_close_socket_file                 : Close a binary socket file.
  ug_free_socket_files                 : Close all binary socket files and free
                                         socket file arrays.
  ug_get_file_name_socket_file_index   : Get index for a binary socket file that
                                         corresponds to a file name.
  ug_get_file_stream_socket_file_index : Get index for a binary socket file that
                                         corresponds to a file stream.
  ug_open_socket_file                  : Create a named binary socket file and
                                         open the file or return file stream
                                         only if it exists.
  ug_socket_file_read                  : Read from a binary socket file.
  ug_socket_file_write                 : Write to a binary socket file.
  ug_rewind_socket_file                : Rewind a binary socket file by closing
                                         existing socket and creating a new one
                                         linked to the original file stream.
  ug_fio_tmp_file
  ug_check_tmp_file                 : Check a binary TMP file by name.
  ug_close_data                     : Close a binary TMP file by file name.
  ug_close_dataf                    : Close a binary TMP file by file name but
                                      don't delete the file or remove it from
                                      the data structure. If the file is not a
                                      true file then it is rewound.
  ug_close_tmp_file                 : Close a binary TMP file by file stream.
  ug_free_tmp_files                 : Close all binary TMP files and free TMP
                                      file arrays and remove TMP directory.
  ug_get_file_name_tmp_file_index   : Get index for a named binary TMP file that
                                      corresponds to a file name.
  ug_get_file_stream_tmp_file_index : Get index for a named binary TMP file that
                                      corresponds to a file stream.
  ug_get_tmp_file_name              : Set binary TMP file name including
                                      directory path.
  ug_open_tmp_file                  : Create or attach a named binary TMP file
                                      and open the file or return file stream
                                      only if it exists.
  ug_remove_tmp_file                : Remove a binary TMP file by name if it is
                                      a true file.
  ug_rewind_data                    : Rewind a binary TMP file by file name.
  ug_set_tmp_file_dir               : Set binary TMP file directory and create
                                      it if directory doesn't exist.

  ug_lib_error_message     : Write a UG error message.

  ug_cpu_message           : Write CPU time to standard output.
  ug_error_message         : Write a message to standard error output.
  ug_kword_error_message   : Write a KWORD error message.
  ug_message               : Write a message to standard output.

  ug_signal
  ug_register_signal_cleanup : Register an external cleanup routine to call just
                               before exiting after a fatal error that can be
                               trapped by the signal function.
  ug_signal                  : Set ID numbers and labels for all fatal system
                               signals that should be sent to the signal handler
                               ug_signal_handler if possible.
  ug_signal_handler          :  Signal handler for all system signals that were
                                specified in ug_signal. This routine outputs an
                                error message to stderr, removes any left over
                                temporary files generated by ug_fio_tmp
                                routines, calls external cleanup routine (if one
                                was registered with a call to
                                ug_register_signal_cleanup), and then exits.

  ug_system                : Run a system command.

  ug_getpid                : Get process ID.

  ug_date_time             : Get current date and time.

  ug_get_os_type           : Get OS type.

  ug_mp
  ug_mp_setup              : Setup parallel processing mode.
  ug_mp                    : Perform parallel processing task.

  ug_get_double_array      : Get double array data from a tmp file.
  ug_get_int_array         : Get integer array data from a tmp file.
  ug_save_double_array     : Save double array data in a tmp file.
  ug_save_int_array        : Save integer array data in a tmp file.

  ug_get_double_data       : Incrementally get double array data from a tmp
                             file.
  ug_get_int_data          : Incrementally get integer array data from a tmp
                             file.
  ug_save_double_data      : Incrementally save double array data in a tmp
                             file.
  ug_save_int_data         : Incrementally save integer array data in a tmp
                             file.

  ug_copy_double           : Copy double array.
  ug_copy_int              : Copy integer array.
  ug_set_double            : Set double array.
  ug_set_int               : Set integer array.
  ug_max_double            : Get maximum value in a double array.
  ug_max_int               : Get maximum value in an INT_ array.
  ug_min_double            : Get minimum value in a double array.
  ug_min_int               : Get minimum value in an INT_ array.

  ug_random_list           : Create a random list of numbers.
  ug_renumber_int_values   : Renumber a list of integer values so that the
                             values are in either consecutive and ascending
                             order 1,2,3... or consecutive and first encountered
                             order and save a map of the new values.
  ug_sort_double_list      : Sort a list of double values and create a
                             corresponding index.
  ug_sort_int_list         : Sort a list of integer values and create a
                             corresponding index.

  ug_backup_file           : Backup file.
  ug_check_file            : Check if file exists.
  ug_compress_file         : Compress file.
  ug_copy_file             : Copy file.
  ug_mkdir                 : Create a directory.
  ug_remove_dir            : Remove directory.
  ug_remove_file           : Remove file.
  ug_rename_file           : Rename file.
  ug_uncompress_file       : Uncompress file.

  ug_round_off_error       : Determine machine round-off error.

  ug_version               : Get compile date and OS for ug library.
  ug_version_info          : Write library version information.

To use these routines, the UG libraries must be linked using the compiler flags
"-Lsimcenter_sys_dir -lug". The directory simcenter_sys_dir is the SimCenter
system directory which is stored in the environment variable $SIMCENTER_SYS_DIR.
C or C++ source code which contains a call to one of the UG routines must have
the following include statement, #include "simcenter_sys_dir/ug/UG_LIB.h". See
the UG routine documentation files, simcenter_sys_dir/ug/ug_*.txt, for further
information. The UG include file, simcenter_sys_dir/ug/UG_LIB.h, includes UG
library routine header files along with UG library macro function definitions
(see ug_macro.h and ug_macro.txt), type definitions (see ug_typedef.h and
ug_typedef.txt), and structures (see UG_Param_Struct.h).

All UG related code use the UG library routines for all memory management
(ug_free, ug_malloc, and ug_realloc), all standard output (ug_message), and all
standard error output (ug_error_message). These basic routines can be modified
to change memory management, redirect standard output, and/or redirect standard
error output for all UG related code.

Testing routines are also provided in directory simcenter_sys_dir/src/ug/. These
routines are commented and provide examples of implementing all of the UG
library routines. The executable ug.exe (which uses these routines and is
accessible through the script ug) can be used to test ug routines. The testing
routines are listed below.

  ug.c                       : Test and demonstrate usage of all UG library
                               routines. The corresponding executable ug.exe is
                               used by the script ug and has no options or user
                               input.
  ug_initialize_test_param   : Set the name, flag, default value, minimum
                               allowable value, maximum allowable value, and
                               description for all UG test parameters.
                               Used for testing and illustration of how UG
                               parameters can be set.

